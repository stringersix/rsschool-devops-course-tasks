pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/builder.yaml'
    }
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        sh 'cp -r ${WORKSPACE}/* /workspace/'
      }
    }


  stage('Setup Secrets and Configurations for Monitoring'){
    steps {
      withCredentials([
        string(credentialsId: 'SMTP_EMAIL', variable: 'SMTP_EMAIL'),
        string(credentialsId: 'SMTP_PASS', variable: 'SMTP_PASS'),
        string(credentialsId: 'GRAFANA_ADMIN_PASS', variable: 'GRAFANA_ADMIN_PASS')
      ]) {
        container('toolbox') {
        sh '''
        echo "🌐 Create namespace for monitoring..."
        kubectl create namespace monitoring || true
        '''
        sh '''
        echo "🔐 Creating Grafana admin secret..."
        kubectl create secret generic grafana-admin-secret \
        --from-literal=admin-user=admin \
        --from-literal=admin-password="$GRAFANA_ADMIN_PASS" \
        -n monitoring --dry-run=client -o yaml | kubectl apply -f -
        '''
        sh '''
        echo "📊 Creating Grafana dashboard configmap..."
        kubectl create configmap jenkins-dashboard \
        --from-file=dashboard.json=monitoring/dashboard.json \
        -n monitoring --dry-run=client -o yaml | kubectl apply -f -
        kubectl label configmap jenkins-dashboard grafana_dashboard=1 -n monitoring --overwrite
        '''
        sh '''
        echo "🔐 Generate Alert Manager config from template and create secret..."
        envsubst < monitoring/configs/notifications.tpl.yaml | \
        kubectl create secret generic notification-config \
        --from-file=alertmanager.yaml=/dev/stdin \
        -n monitoring --dry-run=client -o yaml | kubectl apply -f -
        '''
        sh '''
        echo "📋 Creating Prometheus alert rules ConfigMap..."
        kubectl apply -f monitoring/configs/rules.yaml -n monitoring
        '''
        }
      }
    }
  }

  stage('Setup Monitoring') {
    steps {
      withCredentials([
        string(credentialsId: 'SMTP_EMAIL', variable: 'SMTP_EMAIL'),
        string(credentialsId: 'SMTP_PASS', variable: 'SMTP_PASS'),
      ]) {
        container('toolbox') {
          sh '''
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
        helm repo update

        echo "🔧 Installing prom-stack in monitoring..."
        helm upgrade --install "prom-stack" prometheus-community/kube-prometheus-stack \
        --namespace monitoring --create-namespace \
        -f monitoring/helm/values.yaml \
        --set smtp.email=$SMTP_EMAIL \
        --set smtp.pass=$SMTP_PASS \
        --wait
        '''
        }
      }
    }
  }

  stage('Verify Monitoring Deployment') {
    steps {
      container('toolbox') {
        sh '''
        pip install requests
        echo "Check Prometheus: "
        python3 /workspace/deploy/verify.py http://prom-stack-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090
        echo "Check Grafana: "
        python3 /workspace/deploy/verify.py http://prom-stack-grafana.monitoring.svc.cluster.local
      '''
      }
    }
  }
  }
}