pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/builder.yaml'
    }
  }

  stages {
    stage('Prepare Workspace') {
      steps {
        sh 'cp -r ${WORKSPACE}/* /workspace/'
      }
    }
  stage('Setup Monitoring') {
    steps {
      container('toolbox') {
        sh '''
      set +x
      set -o allexport
      . /etc/secrets/.env
      set +o allexport
      set -x

      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
      helm repo update
      
      echo "üîß Installing $RELEASE in $NAMESPACE..."
      helm upgrade --install "$RELEASE" prometheus-community/kube-prometheus-stack \
        --namespace "$NAMESPACE" --create-namespace \
        -f monitoring/helm/values.yaml \
        --wait

      echo "üîê Generate Alert Manager config from template and create secret..."
      set +x
      export SMTP_EMAIL="$SMTP_EMAIL" SMTP_PASS="$SMTP_PASS"
      envsubst < monitoring/alerts/alertmanager.yaml.tpl | \
      kubectl create secret generic alertmanager-config \
        --from-file=alertmanager.yaml=/dev/stdin \
        -n "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
      set -x
      echo "üîê Creating Grafana admin secret..."
      kubectl create secret generic "$SECRET_NAME" \
        --from-literal=admin-user=admin \
        --from-literal=admin-password=admin123 \
        -n "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

      echo "üìä Creating Grafana dashboard configmap..."
      kubectl create configmap jenkins-dashboard \
        --from-file=dashboard.json=monitoring/dashboard.json \
        -n "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
      kubectl label configmap jenkins-dashboard grafana_dashboard=1 -n "$NAMESPACE" --overwrite

      echo "üìã Creating Prometheus alert rules ConfigMap..."
      kubectl apply -f monitoring/alerts/rules.yaml -n "$NAMESPACE"

      echo "üîê Creating SMTP secret..."
      set +x
      kubectl create secret generic smtp-auth-secret \
        --from-literal=password="$SMTP_PASS" \
        -n "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
      set -x
      echo "‚úÖ Monitoring stack deployed successfully!"
    '''
      }
    }
  }

  stage('Verify Monitoring Deployment') {
    steps {
      container('toolbox') {
        sh '''
        pip install requests
        echo "Check Prometheus: "
        python3 /workspace/deploy/verify.py http://prom-stack-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090
        echo "Check Grafana: "
        python3 /workspace/deploy/verify.py http://prom-stack-grafana.monitoring.svc.cluster.local
      '''
      }
    }
  }
  
  //   stage('Print env') {
  //     steps {
  //       sh 'echo $APP_ENV && echo $APP_PORT'
  //     }
  //   }

  //   stage('Tests') {
  //     steps {
  //       container('toolbox') {
  //         sh '''
  //           set +e

  //           pip install flask pytest
  //           cd /workspace/deploy
  //           echo "Running pytest tests..."
  //           pytest test.py -q --disable-warnings > pytest_report.txt
  //           exit_code=$?

  //           echo "pytest exit code: $exit_code"

  //           if [ $exit_code -ne 0 ]; then
  //             echo "‚ùå Pytest reported failed tests:"
  //             cat pytest_report.txt
  //             exit $exit_code
  //           else
  //             echo "‚úÖ Pytest passed all tests."
  //           fi

  //           set -e
  //         '''
  //       }
  //     }
  //   }

  //   stage('Deploy flask-app with Helm') {
  //     steps {
  //       container('toolbox') {
  //         sh '''
  //           helm upgrade --install flask-app /workspace/deploy/helm \
  //             --set image.repository=daniluk666/flask \
  //             --set image.tag=latest \
  //             --wait
  //         '''
  //       }
  //     }
  //   }

  //   stage('Deploy monitoring with Helm') {
  //     steps() {
  //       container('toolbox') {
  //         sh '''
  //         	helm upgrade --install prom-stack prometheus-community/kube-prometheus-stack \
  // 		        --namespace monitoring --create-namespace \
  // 		        -f monitoring/helm/values.yaml \
	// 	          --wait
  //         '''
  //         sh '''
  //         	helm upgrade --install prom-stack prometheus-community/kube-prometheus-stack \
  // 		        --namespace monitoring --create-namespace \
  // 		        -f monitoring/helm/values.yaml \
	// 	          --wait
  //         '''
  //       }
  //     }
  //   }

  //   stage('Verify Deployment') {
  //     steps {
  //       container('toolbox') {
  //         sh '''
  //         pip install requests
  //         python /workspace/deploy/verify.py http://flask-app.jenkins.svc.cluster.local:8080
  //         '''
  //       }
  //     }
  //   }
  }
}